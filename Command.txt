dotnet new sln
dotnet new classlib -n Domain
dotnet new classlib -n Application
dotnet new classlib -n Persistence
dotnet new webapi -n API
dotnet sln add Domain/
dotnet sln add Application/
dotnet sln add Persistence/
dotnet sln add API/

**Add reference from Reactivities folder**
cd Application
dotnet add reference ../Domain/
dotnet add reference ../Persistence/

cd..
cd API
dotnet add reference ../Application/

cd..
cd Persistence
dotnet add reference ../Domain/

cd..
code .

In VS Code, it will prompt Required assets to build and debug are missing from 'Reactivities'. Add them? Yes

VS Code > Settings > Type exclude > add **/bin and **/obj to exclude list

Go to persistence project, nuget package add 
1. Microsoft.EntityFrameworkCore
2. Microsoft.EntityFrameworkCore.Sqlite

Go to API project, nuget package add 
1. Microsoft.EntityFrameworkCore.Design

dotnet tool install --global dotnet-ef

cd reactivities folder, dotnet ef migrations add InitialCreated -p Persistence/ -s API/

cd reactivities folder, dotnet ef migrations add SeedValues -p Persistence/ -s API/

Section 4
Stop API run, dotnet ef migrations add "ActivitiesAdded" -p Persistence/ -s API/

Go to Application project, nuget package install MediatR.Extensions.Microsoft.DependencyInjection


drop database reset data
cd reactivities folder, dotnet ef database drop -p Persistence/ -s API/

cd client-app, npm install mobx mobx-react-lite

Go to application project, nuget package add 
1. FluentValidation.DotNetCore

cd client-app, npm install react-final-form final-form
cd client-app, npm install react-widgets react-widgets-date-fns
import 'react-widgets/dist/css/react-widgets.css'; to index.html
import dateFnsLocalizer from 'react-widgets-date-fns'; 
dateFnsLocalizer() to index.html
cd client-app, npm install revalidate

nuget package install in Domain project, Microsoft.AspNetCore.Identity.EntityFrameworkCore

cd reactivities folder, dotnet ef migrations add "AddedIdentity" -p Persistence/ -s API/

nuget package install in API project, Microsoft.AspNetCore.Identity.UI

dotnet new classlib -n Infrastructure
dotnet sln add Infrastructure/
cd Application
dotnet add reference ../Infrastructure/
cd API
dotnet add reference ../Infrastructure/

install System.IdentityModel.Tokens.JWT in Infrastructure project
install Microsoft.AspNetCore.Authentication.JWTBearer in API project

//store user secrets in development mode ony
dotnet user-secrets init -p API
dotnet user-secrets set "TokenKey" "super secret key" -p API/


Section 14
cd reactivities folder, dotnet ef migrations add "UserActivityAdded" -p Persistence/ -s API/
AutoMapper.Extensions.Microsoft.DependencyInjection > Application project
Microsoft.EntityFrameworkCore.Proxies > Persistence project

Section 15
cd API, dotnet user-secrets set "Cloudinary:CloudName" "djvafv95h"
		dotnet user-secrets set "Cloudinary:ApiKey" "418417152915966"
		dotnet user-secrets set "Cloudinary:ApiSecret" "jOnDl9rupLgdUEj0pmIuPMNiSN4"
install nuget CloudinaryDotNet.Actions >> Infrastructure project

Section 16
cd reactivities folder, dotnet ef migrations add "PhotoEntityAdded" -p Persistence/ -s API/


Section 17
npm install react-dropzone
npm install react-cropper @types/react-cropper
